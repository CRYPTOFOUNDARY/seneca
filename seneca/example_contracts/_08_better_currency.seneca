#!/usr/bin/env seneca_0.1
## Example currency smart contract ##

from seneca import runtime as rt
from seneca import types
from seneca.modulelib import export, make_exports

balances = types.hmap('balances', str, int)
locked = types.hmap('allowed', str, types.hmap(value_type=int))


@export
def balance_of(wallet_id):
    return balances[wallet_id]


@export
def transfer(to, amount):
    assert balances[rt.sender] >= amount, 'Not enough funds!'

    balances[rt.sender] -= amount
    balances[to] += amount


@export
def lock(spender, amount):
    assert balances[rt.sender] >= amount, 'Not enough funds!'
    locked[rt.sender][spender] += amount
    balances[rt.sender] -= amount


@export
def unlock(spender, amount):
    assert locked[rt.sender][spender] >= amount, 'Not enough funds!'
    locked[rt.sender][spender] -= amount
    balances[rt.sender] += amount


@export
def redeem(owner, amount):
    assert locked[owner][rt.sender] >= amount, 'Not enough funds!'

    locked[owner][rt.sender] -= amount
    balances[rt.sender] += amount


@export
def get_locked(owner, spender):
    return locked[owner][spender]


@export
def mint(to, amount):
    assert rt.sender == rt.author, 'Only the original contract author can mint!'
    balances[to] += amount
