import ast, builtins

allowed_ast_types = {
    ast.Module,
    ast.Eq,
    ast.Call,
    ast.Dict,
    ast.Attribute,
    ast.Pow,
    ast.Index,
    ast.Not,
    ast.alias,
    ast.If,
    ast.FunctionDef,
    ast.GtE,
    ast.LtE,
    ast.Load,
    ast.arg,
    ast.Add,
    ast.Lambda,
    ast.Import,
    ast.ImportFrom,
    ast.Name,
    ast.Num,
    ast.BinOp,
    ast.Store,
    ast.Assert,
    ast.Assign,
    ast.Subscript,
    ast.Compare,
    ast.Return,
    ast.NameConstant,
    ast.Expr,
    ast.keyword,
    ast.Sub,
    ast.arguments,
    ast.List,
    ast.Set,
    ast.Str,
    ast.UnaryOp,
    ast.Pass,
    ast.Tuple,
    ast.Div,
    ast.In,
    ast.NotIn,
    ast.Gt,
    ast.Lt,
    ast.Starred,
    ast.Mod,
    ast.NotEq,
    # TODO: Decide if we actually want these
    # Error handling
    # ast.ExceptHandler,
    # ast.Try,
    # Loops
    ast.For,
    ast.While,
    # comprehension
    ast.ListComp,
    ast.comprehension,
    ast.Slice,
    ast.USub,
    # Conditonals
    ast.BoolOp,
    ast.And,
    ast.Or
}

allowed_import_paths = [
    'seneca.contracts',
    'seneca.libs'
]

_safe_names = [
    '__import__',
    '__name__',
    '__doc__',
    'globals',
    'locals',

    'help',
    'print',

    'None',
    'False',
    'True',
    'abs',
    'bool',
    'callable',
    'chr',
    'complex',
    'divmod',
    'float',
    'hash',
    'hex',
    'id',
    'int',
    'isinstance',
    'issubclass',
    'len',
    'oct',
    'ord',
    'pow',
    'range',
    'repr',
    'round',
    'slice',
    'str',
    'tuple',
    'zip'
]

_safe_exceptions = [
    'ArithmeticError',
    'AssertionError',
    'AttributeError',
    'BaseException',
    'BufferError',
    'BytesWarning',
    'DeprecationWarning',
    'EOFError',
    'EnvironmentError',
    'Exception',
    'FloatingPointError',
    'FutureWarning',
    'GeneratorExit',
    'IOError',
    'ImportError',
    'ImportWarning',
    'IndentationError',
    'IndexError',
    'KeyError',
    'KeyboardInterrupt',
    'LookupError',
    'MemoryError',
    'NameError',
    'NotImplementedError',
    'OSError',
    'OverflowError',
    'PendingDeprecationWarning',
    'ReferenceError',
    'RuntimeError',
    'RuntimeWarning',
    'StopIteration',
    'SyntaxError',
    'SyntaxWarning',
    'SystemError',
    'SystemExit',
    'TabError',
    'TypeError',
    'UnboundLocalError',
    'UnicodeDecodeError',
    'UnicodeEncodeError',
    'UnicodeError',
    'UnicodeTranslateError',
    'UnicodeWarning',
    'UserWarning',
    'ValueError',
    'Warning',
    'ZeroDivisionError',
]

safe_builtins = {}

for name in _safe_names:
    safe_builtins[name] = getattr(builtins, name)

for name in _safe_exceptions:
    safe_builtins[name] = getattr(builtins, name)
